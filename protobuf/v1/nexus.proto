syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/protobuf/empty.proto";
import "common.proto";

package mayastor.v1;

service NexusRpc {
  // Nexus related methods.
  //
  // Nexus is a logical frontend representing a data volume taking care of
  // replication and rebuild in the background.

  rpc CreateNexus (CreateNexusRequest) returns (CreateNexusResponse) {}
  rpc DestroyNexus (DestroyNexusRequest) returns (google.protobuf.Empty) {}
  rpc ListNexus (ListNexusOptions) returns (ListNexusResponse) {}
  rpc AddChildNexus (AddChildNexusRequest) returns (AddChildNexusResponse) {}
  rpc RemoveChildNexus (RemoveChildNexusRequest) returns (RemoveChildNexusResponse) {}
  rpc FaultNexusChild (FaultNexusChildRequest) returns (google.protobuf.Empty) {}
  rpc ShutdownNexus (ShutdownNexusRequest) returns (google.protobuf.Empty) {}

  // Nexus-level fault injection and other development methods
  rpc InjectNexusFault (InjectNexusFaultRequest) returns (google.protobuf.Empty) {}
  rpc RemoveInjectedNexusFault (RemoveInjectedNexusFaultRequest) returns (google.protobuf.Empty) {}
  rpc ListInjectedNexusFaults (ListInjectedNexusFaultsRequest) returns (ListInjectedNexusFaultsReply) {}

  // This method is called by control plane to construct a block device
  // (/dev/...) that will be used to connect the nexus to the OS.
  rpc PublishNexus (PublishNexusRequest) returns (PublishNexusResponse) {}
  rpc UnpublishNexus (UnpublishNexusRequest) returns (UnpublishNexusResponse) {}

  // NVMe ANA state
  rpc GetNvmeAnaState (GetNvmeAnaStateRequest) returns (GetNvmeAnaStateResponse) {}
  rpc SetNvmeAnaState (SetNvmeAnaStateRequest) returns (SetNvmeAnaStateResponse) {}

  // Nexus child operations
  rpc ChildOperation(ChildOperationRequest) returns (ChildOperationResponse) {}

  // Rebuild operations
  rpc StartRebuild (StartRebuildRequest) returns (StartRebuildResponse) {}
  rpc StopRebuild (StopRebuildRequest) returns (StopRebuildResponse) {}
  rpc PauseRebuild (PauseRebuildRequest) returns (PauseRebuildResponse) {}
  rpc ResumeRebuild (ResumeRebuildRequest) returns (ResumeRebuildResponse) {}
  rpc GetRebuildState (RebuildStateRequest) returns (RebuildStateResponse) {}
  rpc GetRebuildStats (RebuildStatsRequest) returns (RebuildStatsResponse) {}
}

// Create nexus arguments.
message CreateNexusRequest {
  string name = 1; // name of the nexus
  string uuid = 2; // UUID of the nexus
  uint64 size = 3; // size of the device in bytes
  uint32 minCntlId = 4;  // minimum NVMe controller ID
  uint32 maxCntlId = 5;  // maximum NVMe controller ID
  uint64 resvKey = 6;    // NVMe reservation key for children
  uint64 preemptKey = 7; // NVMe preempt key for children
  repeated string children = 8; // uris to the targets we connect to
  string nexusInfoKey = 9; // the key to use to persist the nexus info structure
  optional NvmeReservation resvType = 10; // the reservation type to use
  NexusNvmePreemption preemptPolicy = 11; // the preemption policy to use
}

/// Nexus NVMe preemption policy.
enum NexusNvmePreemption {
  ArgKey = 0; // preempts using the preemptKey argument, if any
  Holder = 1; // preempts the current reservation holder, if any
}

/// NVMe reservation types.
enum NvmeReservation {
  Reserved = 0;
  WriteExclusive = 1;
  ExclusiveAccess = 2;
  WriteExclusiveRegsOnly = 3;
  ExclusiveAccessRegsOnly = 4;
  WriteExclusiveAllRegs = 5;
  ExclusiveAccessAllRegs = 6;
}

// State of the nexus child.
enum ChildState {
  CHILD_STATE_UNKNOWN = 0;  // no particular reason for the child to be in this state; this is typically the init state
  CHILD_STATE_ONLINE = 1;   // healthy and contains the latest bits
  CHILD_STATE_DEGRADED = 2; // rebuild is in progress (or other recoverable error)
  CHILD_STATE_FAULTED = 3;  // unrecoverable error (control plane must act)
}

// State of the nexus child.
enum ChildStateReason {
  CHILD_STATE_REASON_NONE = 0;            // reason for CHILD_REASON_NONE, CHILD_UNKNOWN
  CHILD_STATE_REASON_INIT = 1;            // child is being initialized
  CHILD_STATE_REASON_CLOSED = 2;          // child is being destroyed or has been closed
  CHILD_STATE_REASON_CANNOT_OPEN = 3;     // failed to open child (e.g. cannot access device)
  CHILD_STATE_REASON_CONFIG_INVALID = 4;  // invalid child device configuration (e.g. mismatching size)
  CHILD_STATE_REASON_REBUILD_FAILED = 5;  // rebuild operation failed for this child
  CHILD_STATE_REASON_IO_FAILURE = 6;      // child faulted because of other I/O errors
  CHILD_STATE_REASON_BY_CLIENT = 7;       // child has been faulted by a client
  CHILD_STATE_REASON_OUT_OF_SYNC = 8;     // child is being rebuilt
  CHILD_STATE_REASON_NO_SPACE = 9;        // child faulted because I/O operation failed with ENOSPC
  CHILD_STATE_REASON_TIMED_OUT = 10;      // child faulted because I/O operation failed with timeout
  CHILD_STATE_REASON_ADMIN_FAILED = 11;   // child faulted of an admin command failure
}

// represents a child device part of a nexus
message Child {
  string uri = 1;                     // uri of the child device
  ChildState state = 2;               // state of the child
  ChildStateReason state_reason = 3;  // child state reason
  int32 rebuild_progress = 4;         // rebuild progress
  optional string device_name = 5;    // child device name
}

// State of the nexus (terminology inspired by ZFS).
enum NexusState {
  NEXUS_UNKNOWN = 0;
  NEXUS_ONLINE = 1;        // healthy and working
  NEXUS_DEGRADED = 2;      // not healthy but is able to serve IO (i.e. rebuild is in progress)
  NEXUS_FAULTED = 3;       // broken and unable to serve IO
  NEXUS_SHUTTING_DOWN = 4; // shutdown in progress: not able to serve I/O
  NEXUS_SHUTDOWN = 5;      // shutdown complete: not able to serve I/O
}

enum NvmeAnaState {
  NVME_ANA_INVALID_STATE = 0;           // invalid, do not use
  NVME_ANA_OPTIMIZED_STATE = 0x1;
  NVME_ANA_NON_OPTIMIZED_STATE = 0x2;
  NVME_ANA_INACCESSIBLE_STATE = 0x3;
  NVME_ANA_PERSISTENT_LOSS_STATE = 0x4; // not yet supported
  NVME_ANA_CHANGE_STATE = 0xF;          // not yet supported
}

// represents a nexus device
message Nexus {
  string name = 1;             // name of the nexus
  string uuid = 2;             // UUID of the bdev
  uint64 size = 3;             // size of the volume in bytes
  NexusState state = 4;        // current state of the nexus
  repeated Child children = 5; // array of children
  // URI of the device for the volume (missing if not published).
  // Missing property and empty string are treated the same.
  string device_uri = 6;
  uint32 rebuilds = 7;         // total number of rebuild tasks
  NvmeAnaState ana_state = 8;  // Nexus ANA state.
  repeated string allowed_hosts = 9; // host (nqn's) which are allowed to connect to the target
}

message CreateNexusResponse {
  Nexus nexus = 1;
}

message AddChildNexusResponse {
  Nexus nexus = 1;
}

message RemoveChildNexusResponse {
  Nexus nexus = 1;
}

message UnpublishNexusResponse {
  Nexus nexus = 1;
}

message SetNvmeAnaStateResponse {
  Nexus nexus = 1;
}

message ListNexusResponse {
  repeated Nexus nexus_list = 1;
}

message DestroyNexusRequest   {
  string uuid = 1;    // uuid of the nexus
}

message ShutdownNexusRequest   {
  string uuid = 1;    // uuid of the nexus
}

message AddChildNexusRequest {
  string uuid = 1;    // uuid of the nexus
  string uri = 2;     // URI of the child device to be added
  bool norebuild = 3;   // auto start rebuilding
}

message RemoveChildNexusRequest {
  string uuid = 1;    // uuid of the nexus
  string uri = 2;     // URI of the child device to be removed
}

message FaultNexusChildRequest {
  string uuid = 1;    // uuid of the nexus
  string uri = 2;     // URI of the child device to be faulted
}

message InjectNexusFaultRequest {
  string uuid = 1;    // uuid of the nexus
  string uri = 2;     // Fault injection URI
}

message RemoveInjectedNexusFaultRequest {
  string uuid = 1;    // uuid of the nexus
  string uri = 2;     // Fault injection URI
}

message InjectedFault {
  string device_name = 1;
  bool is_active = 2;
}

message ListInjectedNexusFaultsRequest {
  string uuid = 1;    // uuid of the nexus
}

message ListInjectedNexusFaultsReply {
  repeated InjectedFault injections = 1;
}

// this message will be subject to change as we will add support for remote
// storage protocols.
message PublishNexusRequest {
  string uuid = 1; // uuid of the nexus which to create device for
  string key = 2; // encryption key
  ShareProtocol share = 3;  // protocol used for the front end.
  repeated string allowed_hosts = 4; // host (nqn's) which are allowed to connect to the target.
}

message PublishNexusResponse {
  Nexus nexus = 1;
}

message UnpublishNexusRequest {
  string uuid = 1;   // uuid of the nexus which to destroy
}

message ListNexusOptions {
  // list the nexus matching the name if provided
  google.protobuf.StringValue name = 1;
}

message GetNvmeAnaStateRequest {
  string uuid = 1;   // uuid of the nexus
}

message GetNvmeAnaStateResponse {
  NvmeAnaState ana_state = 1;
}

message SetNvmeAnaStateRequest {
  string uuid = 1;   // uuid of the nexus
  NvmeAnaState ana_state = 2;
}

enum ChildAction {
  Offline = 0;
  Online = 1;
  Retire = 2;
}

message ChildOperationRequest {
  string nexus_uuid = 1; // uuid of the nexus
  string uri = 2; // uri of the child to act upon
  ChildAction action = 3;
}

message ChildOperationResponse {
  Nexus nexus = 1;
}

message RebuildStateRequest {
  string nexus_uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message RebuildStateResponse {
  string state = 1; // current rebuild state (i.e. ready/running/completed etc.)
}

message RebuildStatsRequest {
  string nexus_uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message RebuildStatsResponse {
  uint64 blocks_total = 1; // total number of blocks to recover
  uint64 blocks_recovered = 2; // number of blocks recovered
  uint64 progress = 3; // rebuild progress %
  uint64 segment_size_blks = 4; // granularity of each recovery copy in blocks
  uint64 block_size = 5; // size in bytes of each block
  uint64 tasks_total = 6; // total number of concurrent rebuild tasks
  uint64 tasks_active = 7; // number of current active tasks
}

message StartRebuildRequest {
  string nexus_uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the child to be rebuilt
}

message StartRebuildResponse {
  Nexus nexus = 1;
}

message StopRebuildRequest {
  string nexus_uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message StopRebuildResponse {
  Nexus nexus = 1;
}

message PauseRebuildRequest {
  string nexus_uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message PauseRebuildResponse {
  Nexus nexus = 1;
}

message ResumeRebuildRequest {
  string nexus_uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message ResumeRebuildResponse {
  Nexus nexus = 1;
}
