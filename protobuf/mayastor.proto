// The definition of mayastor gRPC interface.

// This interface is supposed to be independent on particular computing
// environment (i.e. kubernetes).

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.openebs.mayastor";
option java_outer_classname = "MayastorProto";

package mayastor;

// Service for managing storage pools, replicas and nexus's.
// Replica holds the actual user data. From user application the
// data are accessed indirectly through nexus object.
service Mayastor {
  // Storage pool related methods.
  //
  // Storage pool is made up of block devices disks and provides a storage
  // space for thin provisioning of replicas.

  rpc CreatePool (CreatePoolRequest) returns (Pool) {}
  rpc DestroyPool (DestroyPoolRequest) returns (Null) {}
  rpc ListPools (Null) returns (ListPoolsReply) {}

  // Replica related methods.
  //
  // Replica allocates space from storage pool.

  rpc CreateReplica (CreateReplicaRequest) returns (Replica) {}
  rpc CreateReplicaV2 (CreateReplicaRequestV2) returns (ReplicaV2) {}
  rpc DestroyReplica (DestroyReplicaRequest) returns (Null) {}
  rpc ListReplicas (Null) returns (ListReplicasReply) {}
  rpc ListReplicasV2 (Null) returns (ListReplicasReplyV2) {}
  rpc StatReplicas (Null) returns (StatReplicasReply) {}
  rpc ShareReplica (ShareReplicaRequest) returns (ShareReplicaReply) {}

  // Nexus related methods.
  //
  // Nexus is a logical frontend representing a data volume taking care of
  // replication and rebuild in the background.

  rpc CreateNexus (CreateNexusRequest) returns (Nexus) {}
  rpc CreateNexusV2 (CreateNexusV2Request) returns (Nexus) {}
  rpc DestroyNexus (DestroyNexusRequest) returns (Null) {}
  rpc ListNexus (Null) returns (ListNexusReply) {}
  rpc ListNexusV2 (Null) returns (ListNexusV2Reply) {}
  rpc AddChildNexus (AddChildNexusRequest) returns (Child) {}
  rpc RemoveChildNexus (RemoveChildNexusRequest) returns (Null) {}
  rpc FaultNexusChild (FaultNexusChildRequest) returns (Null) {}

  // This method is called by control plane to construct a block device
  // (/dev/...) that will be used to connect the nexus to the OS.
  rpc PublishNexus (PublishNexusRequest) returns (PublishNexusReply) {}
  rpc UnpublishNexus (UnpublishNexusRequest) returns (Null) {}

  // NVMe ANA state
  rpc GetNvmeAnaState (GetNvmeAnaStateRequest) returns (GetNvmeAnaStateReply) {}
  rpc SetNvmeAnaState (SetNvmeAnaStateRequest) returns (Null) {}

  // Mayastor instance methods.
  rpc GetMayastorInfo (Null) returns (MayastorInfoRequest) {}

  // Nexus child operations
  rpc ChildOperation(ChildNexusRequest) returns (Null) {}

  // Rebuild operations
  rpc StartRebuild (StartRebuildRequest) returns (Null) {}
  rpc StopRebuild (StopRebuildRequest) returns (Null) {}
  rpc PauseRebuild (PauseRebuildRequest) returns (Null) {}
  rpc ResumeRebuild (ResumeRebuildRequest) returns (Null) {}
  rpc GetRebuildState (RebuildStateRequest) returns (RebuildStateReply) {}
  rpc GetRebuildStats (RebuildStatsRequest) returns (RebuildStatsReply) {}
  rpc GetRebuildProgress (RebuildProgressRequest) returns (RebuildProgressReply) {}

  // Snapshot operations
  rpc CreateSnapshot (CreateSnapshotRequest) returns (CreateSnapshotReply) {}

  // Enumerate block devices on current host
  rpc ListBlockDevices (ListBlockDevicesRequest) returns (ListBlockDevicesReply) {}

  // Obtain resource usage statistics for the current process
  rpc GetResourceUsage (Null) returns (GetResourceUsageReply) {}

  // NVMe controllers
  rpc ListNvmeControllers (Null) returns (ListNvmeControllersReply) {}
  rpc StatNvmeControllers (Null) returns (StatNvmeControllersReply) {}
}

// Means no arguments or no return value.
message Null {}

// Create pool arguments.
// Currently we support only concatenation of disks (RAID-0).
message CreatePoolRequest {
  string name = 1;           // name of the pool
  repeated string disks = 2; // disk device paths or URIs to be claimed by the pool
}

// State of the storage pool (terminology comes from ZFS).
enum PoolState {
  POOL_UNKNOWN = 0;
  POOL_ONLINE = 1;   // the pool is in normal working order
  POOL_DEGRADED = 2; // the pool has experienced a failure but can still function
  POOL_FAULTED = 3;  // the pool is completely inaccessible
}

// Storage pool properties
message Pool {
  string name = 1;            // name of the pool
  repeated string disks = 2;  // absolute disk paths claimed by the pool
  PoolState state = 3;        // current state of the pool
  uint64 capacity = 5;        // size of the pool in bytes
  uint64 used = 6;            // used bytes from the pool
}

// Destroy pool arguments.
message DestroyPoolRequest {
  string name = 1;  // name of the pool
}

// List of pools and their properties.
message ListPoolsReply {
  repeated Pool pools = 1;  // list of the pools
}

// Protocol for remote storage access which exposes a replica.
enum ShareProtocolReplica {
  REPLICA_NONE = 0;   // not exposed
  REPLICA_NVMF = 1;   // NVMe over Fabrics (TCP)
  REPLICA_ISCSI = 2;  // iSCSI
}

// Note that enum values use C++ scoping rules, meaning that enum values are siblings of their type,
// not children of it.
// So cannot use NBD, NVMF, and ISCSI as symbols for ShareProtocolNexus
enum ShareProtocolNexus {
  NEXUS_NBD = 0;    // local
  NEXUS_NVMF = 1;   // NVMe over Fabrics (TCP)
  NEXUS_ISCSI = 2;  // iSCSI
}

// Create replica arguments.
message CreateReplicaRequest {
  string uuid = 1;  // uuid of the replica
  string pool = 2;  // name of the pool
  uint64 size = 3;  // size of the replica in bytes
  bool thin = 4;    // thin provisioning
  ShareProtocolReplica share = 5;  // protocol to expose the replica over
}

message CreateReplicaRequestV2 {
  string name = 1;  // name of the replica
  string uuid = 2;  // uuid of the replica
  string pool = 3;  // name of the pool
  uint64 size = 4;  // size of the replica in bytes
  bool thin = 5;    // thin provisioning
  ShareProtocolReplica share = 6;  // protocol to expose the replica over
}

// Destroy replica arguments.
message DestroyReplicaRequest {
  string uuid = 1;  // name of the replica
}

// Replica properties
message Replica {
  string uuid = 1;  // uuid of the replica
  string pool = 2;  // name of the pool
  bool thin = 3;    // thin provisioning
  uint64 size = 4;  // size of the replica in bytes
  ShareProtocolReplica share = 5;  // protocol used for exposing the replica
  string uri = 6;   // uri usable by nexus to access it
}

// Replica2 properties
message ReplicaV2 {
  string name = 1;  // name of the replica
  string uuid = 2;  // uuid of the replica
  string pool = 3;  // name of the pool
  bool thin = 4;    // thin provisioning
  uint64 size = 5;  // size of the replica in bytes
  ShareProtocolReplica share = 6;  // protocol used for exposing the replica
  string uri = 7;   // uri usable by nexus to access it
}

// List of replicas and their properties.
message ListReplicasReply {
  repeated Replica replicas = 1;  // list of the replicas
}

// List of V2 replicas and their properties.
message ListReplicasReplyV2 {
  repeated ReplicaV2 replicas = 1;  // list of the replicas
}

// NOTE: We use struct instead of more suitable map type, because JS protobuf
// lib has problem (yields garbage) when decoding maps containing u64:
// https://github.com/protobufjs/protobuf.js/issues/1203
message Stats {
  uint64 num_read_ops = 1;
  uint64 num_write_ops = 2;
  uint64 bytes_read = 3;
  uint64 bytes_written = 4;
}

// Replica stats
message ReplicaStats {
  string uuid = 1;  // uuid of the replica
  string pool = 2;  // name of the pool
  Stats stats = 3;  // stat counters
}

// List of replicas and their properties.
message StatReplicasReply {
  repeated ReplicaStats replicas = 1;  // list of the replicas
}

// Share replica request.
message ShareReplicaRequest {
  string uuid = 1;  // uuid of the replica
  ShareProtocolReplica share = 2;  // protocol used for exposing the replica
  // Use "NONE" to disable remote access.
}

// Share replica response.
message ShareReplicaReply {
  string uri = 1;   // uri under which the replica is accessible by nexus
}

// Create nexus arguments.
message CreateNexusRequest {
  string uuid = 1; // this UUID will be set in as the UUID
  uint64 size = 2; // size of the device in bytes
  // replica can be nvmf remote targets or a local spdk bdev
  // (i.e. bdev:///name-of-the-bdev).
  repeated string children = 3; // uris to the targets we connect to
}

message CreateNexusV2Request {
  string name = 1; // name of the nexus
  string uuid = 2; // UUID of the bdev
  uint64 size = 3; // size of the device in bytes
  uint32 minCntlId = 4;  // minimum NVMe controller ID
  uint32 maxCntlId = 5;  // maximum NVMe controller ID
  uint64 resvKey = 6;    // NVMe reservation key for children
  uint64 preemptKey = 7; // NVMe preempt key for children
  repeated string children = 8; // uris to the targets we connect to
}

// State of the nexus child.
enum ChildState {
  CHILD_UNKNOWN = 0;
  CHILD_ONLINE = 1;   // healthy and contains the latest bits
  CHILD_DEGRADED = 2; // rebuild is in progress (or other recoverable error)
  CHILD_FAULTED = 3;  // unrecoverable error (control plane must act)
}

// represents a child device part of a nexus
message Child {
  string uri = 1;   // uri of the child device
  ChildState state = 2; // state of the child
  int32 rebuild_progress = 3;
}

// State of the nexus (terminology inspired by ZFS).
enum NexusState {
  NEXUS_UNKNOWN = 0;
  NEXUS_ONLINE = 1;    // healthy and working
  NEXUS_DEGRADED = 2;  // not healthy but is able to serve IO (i.e. rebuild is in progress)
  NEXUS_FAULTED = 3;   // broken and unable to serve IO
}

// represents a nexus device
message Nexus {
  string uuid = 1;             // name of the nexus
  uint64 size = 2;             // size of the volume in bytes
  NexusState state = 3;        // current state of the nexus
  repeated Child children = 4; // array of children
  // URI of the device for the volume (missing if not published).
  // Missing property and empty string are treated the same.
  string device_uri = 5;
  uint32 rebuilds = 6;         // total number of rebuild tasks
}

message ListNexusReply {
  repeated Nexus nexus_list = 1;
}

// represents a nexus device
message NexusV2 {
  string name = 1;             // name of the nexus
  string uuid = 2;             // UUID of the bdev
  uint64 size = 3;             // size of the volume in bytes
  NexusState state = 4;        // current state of the nexus
  repeated Child children = 5; // array of children
  // URI of the device for the volume (missing if not published).
  // Missing property and empty string are treated the same.
  string device_uri = 6;
  uint32 rebuilds = 7;         // total number of rebuild tasks
  NvmeAnaState ana_state = 8;  // Nexus ANA state.
}

message ListNexusV2Reply {
  repeated NexusV2 nexus_list = 1;
}

message DestroyNexusRequest   {
  string uuid = 1;    // uuid of the nexus
}

message AddChildNexusRequest {
  string uuid = 1;    // uuid of the nexus
  string uri = 2;     // URI of the child device to be added
  bool norebuild = 3;   // auto start rebuilding
}

message RemoveChildNexusRequest {
  string uuid = 1;    // uuid of the nexus
  string uri = 2;     // URI of the child device to be removed
}

message FaultNexusChildRequest {
  string uuid = 1;    // uuid of the nexus
  string uri = 2;     // URI of the child device to be faulted
}

// this message will be subject to change as we will add support for remote
// storage protocols.
message PublishNexusRequest {
  string uuid = 1; // uuid of the nexus which to create device for
  string key = 2; // encryption key
  ShareProtocolNexus share = 3;  // protocol used for the front end.
}

message PublishNexusReply {
  string device_uri = 1; // i.e. file:///dev/nbd0
}

message UnpublishNexusRequest {
  string uuid = 1;   // uuid of the nexus which to destroy
}

enum NvmeAnaState {
  NVME_ANA_INVALID_STATE = 0;           // invalid, do not use
  NVME_ANA_OPTIMIZED_STATE = 0x1;
  NVME_ANA_NON_OPTIMIZED_STATE = 0x2;
  NVME_ANA_INACCESSIBLE_STATE = 0x3;
  NVME_ANA_PERSISTENT_LOSS_STATE = 0x4; // not yet supported
  NVME_ANA_CHANGE_STATE = 0xF;          // not yet supported
}

message GetNvmeAnaStateRequest {
  string uuid = 1;   // uuid of the nexus
}

message GetNvmeAnaStateReply {
  NvmeAnaState ana_state = 1;
}

message SetNvmeAnaStateRequest {
  string uuid = 1;   // uuid of the nexus
  NvmeAnaState ana_state = 2;
}

message MayastorFeatures {
  bool asymmetricNamespaceAccess = 1;
}

message MayastorInfoRequest {
  string version = 1;
  MayastorFeatures supportedFeatures = 2;
}

enum ChildAction {
  offline = 0;
  online = 1;
}

message ChildNexusRequest {
  string uuid = 1;
  string uri = 2;
  ChildAction action = 3;
}

message RebuildStateRequest {
  string uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message RebuildStateReply {
  string state = 1; // current rebuild state (i.e. ready/running/completed etc.)
}

message RebuildStatsRequest {
  string uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message RebuildStatsReply {
  uint64 blocks_total = 1; // total number of blocks to recover
  uint64 blocks_recovered = 2; // number of blocks recovered
  uint64 progress = 3; // rebuild progress %
  uint64 segment_size_blks = 4; // granularity of each recovery copy in blocks
  uint64 block_size = 5; // size in bytes of each block
  uint64 tasks_total = 6; // total number of concurrent rebuild tasks
  uint64 tasks_active = 7; // number of current active tasks
}

message StartRebuildRequest {
  string uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the child to be rebuilt
}

message StopRebuildRequest {
  string uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message PauseRebuildRequest {
  string uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message ResumeRebuildRequest {
  string uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message RebuildProgressRequest {
  string uuid = 1;  // uuid of the nexus
  string uri = 2;   // uri of the destination child
}

message RebuildProgressReply {
  uint32 progress = 1;  // progress percentage
}

message CreateSnapshotRequest {
  string uuid = 1;  // uuid of the nexus
}

message CreateSnapshotReply {
  string name = 1; // name of snapshot created
}

message BlockDevice {
  message Partition {
    string parent = 1;          // devname of parent device to which this partition belongs
    uint32 number = 2;          // partition number
    string name = 3;            // partition name
    string scheme = 4;          // partition scheme: gpt, dos, ...
    string typeid = 5;          // partition type identifier
    string uuid = 6;            // UUID identifying partition
  }
  message Filesystem {
    string fstype = 1;          // filesystem type: ext3, ntfs, ...
    string label = 2;           // volume label
    string uuid = 3;            // UUID identifying the volume (filesystem)
    string mountpoint = 4;      // path where filesystem is currently mounted
  }
  string devname = 1;           // entry in /dev associated with device
  string devtype = 2;           // currently "disk" or "partition"
  uint32 devmajor = 3;          // major device number
  uint32 devminor = 4;          // minor device number
  string model = 5;             // device model - useful for identifying mayastor devices
  string devpath = 6;           // official device path
  repeated string devlinks = 7; // list of udev generated symlinks by which device may be identified
  uint64 size = 8;              // size of device in (512 byte) blocks
  Partition partition = 9;      // partition information in case where device represents a partition
  Filesystem filesystem = 10;   // filesystem information in case where a filesystem is present
  bool available = 11;          // identifies if device is available for use (ie. is not "currently" in use)
}

message ListBlockDevicesRequest {
  bool all = 1;                 // list "all" block devices found (not just "available" ones)
}

message ListBlockDevicesReply {
  repeated BlockDevice devices = 1;
}

message ResourceUsage {
  int64 soft_faults = 1;        // page reclaims (soft page faults)
  int64 hard_faults = 2;        // hard page faults
  int64 swaps = 3;              // swaps
  int64 in_block_ops = 4;       // input block operations
  int64 out_block_ops = 5;      // output block operations
  int64 ipc_msg_send = 6;       // IPC messages sent
  int64 ipc_msg_rcv = 7;        // IPC messages received
  int64 signals = 8;            // signals received
  int64 vol_csw = 9;            // voluntary context switches
  int64 invol_csw = 10;         // involuntary context switches
}

message GetResourceUsageReply {
  ResourceUsage usage = 1;
}

// Anything what follows here are private interfaces used for interacting with
// mayastor outside the scope of CSI.

service BdevRpc {
  rpc List(mayastor.Null) returns (Bdevs) {}
  rpc Create(BdevUri) returns (CreateReply) {}
  rpc Destroy(BdevUri) returns (Null) {}
  rpc Share(BdevShareRequest) returns (BdevShareReply) {}
  rpc Unshare(CreateReply) returns (Null) {}
}

message BdevShareRequest {
  string name = 1;
  string proto = 2;
}

message BdevShareReply {
  string uri = 1;
}

message Bdev {
  string name = 1;
  string uuid = 2;
  uint64 num_blocks = 3;
  uint32 blk_size = 5;
  bool claimed = 6;
  string claimed_by = 7;
  string aliases = 8;
  string uri = 9;
  string product_name = 10;
  string share_uri = 11;

}

message Bdevs {
  repeated Bdev bdevs = 1;
}

message BdevUri {
  string uri = 1;
}

message CreateReply {
  string name = 1;
}

enum NvmeControllerState {
  NEW = 0;
  INITIALIZING = 1;
  RUNNING = 2;
  FAULTED = 3;
  UNCONFIGURING = 4;
  UNCONFIGURED = 5;
}

message NvmeController {
  string name = 1;               // NVMe controller name
  NvmeControllerState state = 2; // Current state of the NVMe controller
  uint64 size = 3;               // Size of the controller's namespace (0 if no namespace attached).
  uint32 blk_size = 4;           // Block size of the namespace (0 if no namespace attached).
}

message ListNvmeControllersReply {
  repeated NvmeController controllers = 1;
}

message NvmeControllerIoStats {
  uint64 num_read_ops = 1;
  uint64 num_write_ops = 2;
  uint64 bytes_read = 3;
  uint64 bytes_written = 4;
  uint64 num_unmap_ops = 5;
  uint64 bytes_unmapped = 6;
}

message NvmeControllerStats {
  string name = 1;                 // NVMe controller name
  NvmeControllerIoStats stats = 2; // Controller I/O statistics
}

message StatNvmeControllersReply {
  repeated NvmeControllerStats controllers = 1;
}

// SPDK json-rpc proxy service

service JsonRpc {
  // Call a (SPDK) json-rpc method
  rpc JsonRpcCall (JsonRpcRequest) returns (JsonRpcReply) {}
}

message JsonRpcRequest {
    string method = 1;
    string params = 2;
}

message JsonRpcReply {
    string result = 1;
}
